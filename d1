from test import *
def sha(data):
    bytes=""
    h0=0x67452301
    h1=0xEFCDAB89
    h2=0x98BADCFE
    h3=0x10325476
    h4=0xC3D2E1F0

    bytes=""
    for i in range(len(data)):
        bytes+='{0:08b}'.format(ord(data[i]))

    print bytes
    bits=bytes+"1"
    pBits=bits

#pad until length becomes 448%512
    while len(pBits)%512!=448:
        pBits+="0"

#append the original length
    pBits+='{0:064b}'.format(len(bits)-1)
    print pBits
    def chunks(bits,sizeofchunks):
        return [bits[i:i+sizeofchunks] for i in range(0,len(bits),sizeofchunks)]

    def rol(n,b):
        return ((n<<b)|(n>>(32-b)))&0xffffffff

    for c in chunks(pBits,512):
        print c
        words=chunks(c,32)
        print words
        w=[0]*80

        for n in range(0,16):
            w[n]=int(words[n],2)

        for i in range(16,80):
            w[i]=rol((w[i-3]^w[i-8]^w[i-14]^w[i-16]),1)

        a=h0
        b=h1
        c=h2
        d=h3
        e=h4

        for i in range(0,80):
            if 0<=i<=19:
                f=(b&c)|((~b)&d)
                k=0x5A827999
            elif 20<=i<=39:
                f=b^c^d
                k=0x6ED9EBA1
            elif 40<=i<=59:
                f=(b&c)|(b&d)|(c&d)
                k=0x8F1BBCDC
            elif 60<=i<=79:
                f=b^c^d
                k=0xCA62C1D6

            temp=rol(a,5)+f+e+k+w[i]&0xffffffff
            e=d
            d=c
            c=rol(b,30)
            b=a
            a=temp


        h0 = h0 + a & 0xffffffff
        h1 = h1 + b & 0xffffffff
        h2 = h2 + c & 0xffffffff
        h3 = h3 + d & 0xffffffff
        h4 = h4 + e & 0xffffffff

    return '%08x%08x%08x%08x%08x' % (h0, h1, h2, h3, h4)



a=raw_input()

print sha(a)




#client side code

import sha1code	#import the code for sha1 algorithm 
import socket
clientsocket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)	#create a unix domain, stream type client side socket

#get hostname of local machine
#host = socket.gethostname()
host = 'localhost'	#localhost
#assign port no.
port = 12345

clientsocket.connect((host, port))	#connect to localhost,port no. 
msg=raw_input("Enter message: ")
message_digest=sha1code.sha1(msg)
print "Message Digest Initial: ", message_digest



clientsocket.send(msg)	# send message to be encrypted to server
message_from_server=clientsocket.recv(1024)	#get message digest from server
		#compute message digest locally

newmd=sha1code.sha1(message_from_server)
print "Message Digest Final: ", newmd

if(message_digest == newmd):
	print("success")
else:
	print("failure")
	
	
	
	
	
#server side code

import socket
import sha1code	
#create a server side socket object
serversocket =socket.socket(socket.AF_INET,socket.SOCK_STREAM)	#create a unix domain stream socket

#get the hostname of local machine
hostname= 'localhost'
print hostname
port = 12345	#port to which server will be listening
#bind the socket to port
serversocket.bind((hostname, port))	#bind serverside socket to host and port

#set max no. of connections to listen
serversocket.listen(10)

while True:
	#establish a connection by accepting connection from client
	clientsocket,addr =serversocket.accept() #clientsocket is socket connected with client	, addr corresponds to address of client
	print("successfully accepted connection from %s" % str(addr))	#print address of client from whom connection is recieved

	#receive 1024 bytes of message from client	
	plain_text =clientsocket.recv(1024)	

	choice= input("Enter choice: 1. Send back as it is 2. Change the message\n")

	if(choice==2):
		tosend=raw_input("Enter new message")
	else:
		tosend=plain_text

	#message_digest=sha1code.sha1(plain_text)		#get message digest from sha1 algorithm
	clientsocket.send(tosend)	#send back message digest
	clientsocket.close()	#close client side socket

