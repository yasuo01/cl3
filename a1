import unittest
import os
def binary_search(arr,size,key):
	low = 0
	print "Array : ",arr," to be searched for: ",key
	high = size - 1
	mid = int((low+high) / 2)
	while low <= high:
		temp=0
		if key == int(arr[mid]):
			print "Found ",key," at position: ",mid+1,"\n"
			return mid+1
			temp=1
			break
		elif key > int(arr[mid]):
			low = mid + 1
			mid = int((low + high) / 2 )
		else:
			high = mid - 1
			mid = int((low + high) / 2 )
	if temp==0:
		print "Not found \n"
		return 0
class MyTest(unittest.TestCase):
	def test_positive(self):
		self.assertEqual(binary_search([10,20,30,40,50],5,40),4)
	def test_negative(self):
		self.assertEqual(binary_search([10,20,30,40,50],5,4),0)

a=[]
f=open('data.txt','r')
t=f.readline()
t=t.split()
count=len(t)
for i in range(count):
	a.append(int(t[i]))
print "Input array"
print (a )
print "\n--------------\nTesting...\n----------------\n"
a.sort()
print "Sorted array is "
print (a)
key=int(input("Enter the element to be searched: "))
position=binary_search(a, count, key)
unittest.main()
